const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  let token;

  // Check if token is provided in the Authorization header
  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      // Extract the token from the header
      token = req.headers.authorization.split(' ')[1];

      // Verify the token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // Get user from the token and exclude the password field
      req.user = await User.findById(decoded.id).select('-password');
      // Proceed to the next middleware or route handler
      return next();
    } catch (error) {
      // Handle the token verification failure
      console.error("Not authorized, token failed:", error.message);
      return res.status(401).json({ message: 'Not authorized, token failed' });  // Return after sending the response
    }
  }

  // If no token is provided
  if (!token) {
    return res.status(401).json({ message: 'Not authorized, no token' });  // Return after sending the response
  }
};

module.exports = {
  protect,
};

